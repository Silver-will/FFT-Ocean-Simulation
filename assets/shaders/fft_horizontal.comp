#version 460 core
#extension GL_EXT_debug_printf : require
layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

layout(binding = 0, rgba32f) uniform image2D ping0;
layout(binding = 1, rgba32f) uniform image2D ping1;
layout(binding = 2, rgba32f) uniform readonly image2D butterfly_texture;

layout( push_constant ) uniform constants
{
	int resolution;
	int ocean_size;
	vec2 wind; //x-speed y-angle
	float delta_time;
	float choppiness;
	int total_count;
	int log_size;
    float fetch;
    float swell;
    float depth;
    int stage;
    int ping_pong;
} PushConstants;

vec2 ComplexMult(vec2 a, vec2 b)
{
    return vec2(a.x * b.x - a.y * b.y, a.x * b.y + a.y * b.x);
}

/*
void ButterflyValues(uint step, uint index, out uint2 indices, out vec2 twiddle) {
    const float twoPi = 6.28318530718;
    uint b = SIZE >> (step + 1);
    uint w = b * (index / b);
    uint i = (w + index) % SIZE;
    sincos(-twoPi / SIZE * w, twiddle.y, twiddle.x);

    //This is what makes it the inverse FFT
    twiddle.y = -twiddle.y;
    indices = uint2(i, i + b);
}
*/

void main()
{
    ivec2 pixel_coord = ivec2(gl_GlobalInvocationID.xy);
    ivec2 size = imageSize(ping0);

	vec4 butterflyData = imageLoad(butterfly_texture, ivec2(PushConstants.stage, pixel_coord.x));
    //ButterflyValues(PushConsta)
    vec2 twiddle = butterflyData.xy;
    //twiddle = abs(twiddle);
    
    vec2 topSignal1;
    vec2 topSignal2;
    vec2 bottomSignal1;
    vec2 bottomSignal2;
    vec2 h1;
    vec2 h2;
    
    if(PushConstants.ping_pong == 0)
    {
        // top wing signal
        vec4 top = imageLoad(ping0, ivec2(butterflyData.z,pixel_coord.y));
        topSignal1 = top.xy;
        topSignal2 = top.zw;
        // bottom wing signal
        vec4 bottom = imageLoad(ping0, ivec2(butterflyData.w,pixel_coord.y));
        bottomSignal1 = bottom.xy;
        bottomSignal2 = bottom.zw;
    
        // butterfly operation
        h1 = topSignal1 + ComplexMult(twiddle, bottomSignal1);
        h2 = topSignal2 + ComplexMult(twiddle, bottomSignal2);
    
        //debugPrintfEXT("bottom = %v4f", bottom);
    
        imageStore(ping1,pixel_coord, vec4(h1.xy,h2.xy));
        //imageStore(ping1,pixel_coord, bottom);
   
   }
    else
    {
        
        vec4 top = imageLoad(ping1, ivec2(butterflyData.z,pixel_coord.y));
        topSignal1 = top.xy;
        topSignal2 = top.zw;
        // bottom wing signal
        vec4 bottom = imageLoad(ping1, ivec2(butterflyData.w,pixel_coord.y));
        bottomSignal1 = bottom.xy;
        bottomSignal2 = bottom.zw;
    
        // butterfly operation
        h1 = topSignal1 + ComplexMult(twiddle, bottomSignal1);
        h2 = topSignal2 + ComplexMult(twiddle, bottomSignal2);
        
        vec4 val = imageLoad(ping1, pixel_coord);
        imageStore(ping0,pixel_coord, val);

        imageStore(ping0,pixel_coord, vec4(h1.xy,h2.xy));
        //imageStore(ping0,pixel_coord, vec4(1.0f,0.0f,0.0,0.0f));
    }
}
