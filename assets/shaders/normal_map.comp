#version 460
layout(local_size_x = 32, local_size_y = 32, local_size_z = 1)in;

layout(set = 0, binding = 0,r32f) readonly uniform image2D displacement_map;
layout(set = 0, binding = 1,r32f) writeonly uniform image2D normal_map;

layout( push_constant ) uniform constants
{
	int resolution;
	int ocean_size;
	vec2 wind;
	float delta_time;
	float choppiness;
	uint total_count;
	uint subseq_count;
} PushConstants;

void main()
{
	ivec2 pixel_coord = ivec2(gl_GlobalInvocationID.xy);

	float texel = 1.f / PushConstants.resolution;
	float texel_size = PushConstants.ocean_size * texel;

	vec3 center = imageLoad(displacement_map, pixel_coord).xyz;
	vec3 right = vec3(texel_size, 0.f, 0.f) + imageLoad(displacement_map, ivec2(clamp(pixel_coord.x + 1, 0, PushConstants.resolution - 1), pixel_coord.y)).xyz - center;
	vec3 left = vec3(-texel_size, 0.f, 0.f) + imageLoad(displacement_map, ivec2(clamp(pixel_coord.x - 1, 0, PushConstants.resolution - 1), pixel_coord.y)).xyz - center;
	vec3 top = vec3(0.f, 0.f, -texel_size) + imageLoad(displacement_map, ivec2(pixel_coord.x, clamp(pixel_coord.y - 1, 0, PushConstants.resolution - 1))).xyz - center;
	vec3 bottom = vec3(0.f, 0.f, texel_size) + imageLoad(displacement_map, ivec2(pixel_coord.x, clamp(pixel_coord.y + 1, 0, PushConstants.resolution - 1))).xyz - center;

	vec3 top_right = cross(right, top);
	vec3 top_left = cross(top, left);
	vec3 bottom_left = cross(left, bottom);
	vec3 bottom_right = cross(bottom, right);

	imageStore(normal_map, pixel_coord, vec4(normalize(top_right + top_left + bottom_right + bottom_left), 1.f));
}